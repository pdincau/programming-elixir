defmodule MyList do

    def max([h|tail]) do
        reduce(tail, h, &(max/2))
    end

    def mapsum(list, fun) do
        reduce(list, [], &([fun.(&1)|&2]))
        |> sum1
    end

    def reduce([], value, _), do: value

    def reduce([head|tail], value, fun), do: reduce(tail, fun.(head, value), fun)

    def sum([]), do: 0

    def sum([head|tail]), do: head + sum(tail)

    def sum1(list), do: sum1(list, 0)

    defp sum1([], accumulator), do: accumulator

    defp sum1([head|tail], accumulator), do: sum1(tail, head + accumulator)

end
